name: Delete test snapshots on PR merge

on:
  pull_request:
    types:
      - closed

jobs:
  delete_test_snapshots:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest

    steps:
      - name: Remove Snapshot(s)
        run: |
          vultr_api_url="https://api.vultr.com/v2/snapshots"
          auth_header="Authorization: Bearer ${{ secrets.VULTR_API_KEY }}"
          pr_number=${{ github.event.pull_request.number }}
          snapshot_desc="Discord Bot Server [test-PR#$pr_number]"

          # Get all snapshots for this PR and extract the timestamp from the description
          snapshots=$(curl -s -H "$auth_header" "$vultr_api_url" | jq -c --arg prefix "$snapshot_desc" '
            .snapshots | map(select(.description | startswith($prefix)))')

          # Check if there are multiple snapshots
          snapshot_count=$(echo "$snapshots" | jq 'length')
          if [[ $snapshot_count -le 1 ]]; then
            echo "No snapshots to delete, or only one snapshot found."
            exit 0
          fi

          # Sort the snapshots based on the timestamp part in the description
          snapshots_sorted=$(echo "$snapshots" | jq -c 'sort_by(.description | capture("\\[.*\\] (?<date>.*) UTC") | .date)')

          # Get all but the most recent snapshot
          snapshots_to_delete=$(echo "$snapshots_sorted" | jq -c '.[0:-1]')

          # Loop through each snapshot (except the most recent) and delete it
          echo "$snapshots_to_delete" | jq -c '.[]' | while IFS= read -r snapshot; do
            snapshot_id=$(echo "$snapshot" | jq -r '.id')
            snapshot_description=$(echo "$snapshot" | jq -r '.description')
          
            curl -s -X DELETE -H "$auth_header" "$vultr_api_url/$snapshot_id"
            echo "Deleted snapshot: $snapshot_description ($snapshot_id)"
          done
          
          echo "Kept the most recent snapshot."