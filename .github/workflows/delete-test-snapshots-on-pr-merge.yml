name: Delete test snapshots on PR merge

on:
  pull_request:
    types:
      - closed

jobs:
  delete_test_snapshots:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash
    env:
      VULTR_API_URL: https://api.vultr.com/v2/snapshots
      AUTH_HEADER: "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}"
      SNAPSHOT_DESCRIPTION: Discord Bot Server [test-PR#${{ github.event.pull_request.number }}]
      HCP_TF_API_TOKEN: ${{ secrets.HCP_TF_API_TOKEN }}

    steps:
      - name: Fetch snapshots for this PR
        id: fetch_snapshots
        run: |
          snapshots=$(curl -s -H "$AUTH_HEADER" "$VULTR_API_URL" | jq -c --arg desc "$SNAPSHOT_DESCRIPTION" '.snapshots | map(select(.description == $desc))')
          echo "snapshots=$snapshots" >> $GITHUB_OUTPUT

      - name: Check snapshot count
        run: |
          snapshot_count=$(echo '${{ steps.fetch_snapshots.outputs.snapshots }}' | jq 'length')
          echo "Snapshot count: $snapshot_count"
          if [[ $snapshot_count -le 1 ]]; then
            echo "No snapshots to delete, or only one snapshot found."
            exit 0
          fi

      - name: Sort snapshots by descending timestamp
        id: sort_snapshots
        run: |
          snapshots_sorted=$(echo '${{ steps.fetch_snapshots.outputs.snapshots }}' | jq -c 'sort_by(.date) | reverse')
          echo "snapshots_sorted=$snapshots_sorted" >> $GITHUB_OUTPUT

      - name: Delete all but the most recent snapshot
        run: |
          echo '${{ steps.sort_snapshots.outputs.snapshots_sorted }}' | jq -c '.[1:][]' | while IFS= read -r snapshot; do
            snapshot_id=$(echo "$snapshot" | jq -r '.id')
            snapshot_desc=$(echo "$snapshot" | jq -r '.description')

            curl -s -X DELETE -H "$AUTH_HEADER" "$VULTR_API_URL/$snapshot_id"
            echo "Deleted snapshot: $snapshot_desc ($snapshot_id)"
          done
          echo "Kept the most recent snapshot."

      - name: Get workspace ID by name
        id: get_workspace_id
        run: |
          workspace_id=$(curl -s -X GET \
            --header "Authorization: Bearer $HCP_TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            "https://app.terraform.io/api/v2/organizations/madcow234/workspaces?search%5Bname%5D=discord-bot-server-image-testing" | jq -r '.data[0].id')
          if [[ -z "$workspace_id" ]]; then
            echo "Error: Unable to retrieve workspace ID"
            exit 1
          else
            echo "workspace_id=$workspace_id" >> $GITHUB_OUTPUT
          fi

      - name: Trigger HCP Terraform run
        run: |
          curl -X POST \
            --header "Authorization: Bearer $HCP_TF_API_TOKEN" \
            --header "Content-Type: application/vnd.api+json" \
            https://app.terraform.io/api/v2/runs \
            -d '{
              "data": {
                "attributes": {
                  "is-destroy": true,
                  "auto-apply": true
                },
                "type": "runs",
                "relationships": {
                  "workspace": {
                    "data": {
                      "type": "workspaces",
                      "id": "'"${{ steps.get_workspace_id.outputs.workspace_id }}"'"
                    }
                  }
                }
              }
            }'
          if [[ $? -ne 0 ]]; then
            echo "Error: Unable to trigger workspace run"
            exit 1
          fi