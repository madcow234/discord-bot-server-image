name: Delete test snapshots on PR merge

on:
  pull_request:
    types:
      - closed

jobs:
  delete_test_snapshots:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    defaults:
      run:
        shell: bash

    env:
      VULTR_API_URL: https://api.vultr.com/v2/snapshots
      AUTH_HEADER: "Authorization: Bearer ${{ secrets.VULTR_API_KEY }}"
      SNAPSHOT_DESCRIPTION: Discord Bot Server [test-PR#${{ github.event.pull_request.number }}]

    steps:
      - name: Fetch snapshots for this PR
        id: fetch_snapshots
        run: |
          snapshots=$(curl -s -H "$AUTH_HEADER" "$VULTR_API_URL" | jq -c --arg desc "$SNAPSHOT_DESCRIPTION" '.snapshots | map(select(.description == $desc))')
          echo "snapshots=$snapshots" >> $GITHUB_OUTPUT

      - name: Check snapshot count
        run: |
          snapshot_count=$(echo '${{ steps.fetch_snapshots.outputs.snapshots }}' | jq 'length')
          echo "Snapshot count: $snapshot_count"
          if [[ $snapshot_count -le 1 ]]; then
            echo "No snapshots to delete, or only one snapshot found."
            exit 0
          fi

      - name: Sort snapshots by descending timestamp
        id: sort_snapshots
        run: |
          snapshots_sorted=$(echo '${{ steps.fetch_snapshots.outputs.snapshots }}' | jq -c 'sort_by(.date) | reverse')
          echo "snapshots_sorted=$snapshots_sorted" >> $GITHUB_OUTPUT

      - name: Delete all but the most recent snapshot
        run: |
          echo '${{ steps.sort_snapshots.outputs.snapshots_sorted }}' | jq -c '.[1:][]' | while IFS= read -r snapshot; do
            snapshot_id=$(echo "$snapshot" | jq -r '.id')
            snapshot_desc=$(echo "$snapshot" | jq -r '.description')

            curl -s -X DELETE -H "$AUTH_HEADER" "$VULTR_API_URL/$snapshot_id"
            echo "Deleted snapshot: $snapshot_desc ($snapshot_id)"
          done
          echo "Kept the most recent snapshot."